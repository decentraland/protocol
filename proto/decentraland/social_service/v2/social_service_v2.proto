syntax = "proto3";
package decentraland.social_service.v2;

import "google/protobuf/empty.proto";

// Errors
message InvalidFriendshipAction {
  optional string message = 1;
}
message InternalServerError {
  optional string message = 1;
}
message InvalidRequest {
  optional string message = 1;
}
message ProfileNotFound {
  optional string message = 1;
}
message ConflictingError {
  optional string message = 1;
}
message ForbiddenError {
  optional string message = 1;
}
message NotFoundError {
  optional string message = 1;
}

// Types
message User { string address = 1; }

message FriendProfile {
  string address = 1;
  string name = 2;
  bool has_claimed_name = 3;
  string profile_picture_url = 4;
}

message BlockedUserProfile {
  string address = 1;
  string name = 2;
  bool has_claimed_name = 3;
  string profile_picture_url = 4;
  optional int64 blocked_at = 5;
}

message Pagination {
  int32 limit = 1;
  int32 offset = 2;
}

message FriendshipRequestResponse {
  FriendProfile friend = 1;
  int64 created_at = 2;
  optional string message = 3;
  string id = 4;
}

message FriendshipRequests {
  repeated FriendshipRequestResponse requests = 1;
}

enum ConnectivityStatus {
  ONLINE = 0;
  OFFLINE = 1;
  AWAY = 2;
}

message GetFriendsPayload {
  optional Pagination pagination = 1;
}

message GetFriendshipRequestsPayload {
  optional Pagination pagination = 1;
}

message UpsertFriendshipPayload {
  message RequestPayload {
    User user = 1;
    optional string message = 3;
  }
  message AcceptPayload { User user = 1; }
  message RejectPayload { User user = 1; }
  message DeletePayload { User user = 1; }
  message CancelPayload { User user = 1; }

  oneof action {
    RequestPayload request = 1;
    AcceptPayload accept = 2;
    RejectPayload reject = 4;
    DeletePayload delete = 5;
    CancelPayload cancel = 6;
  }
}

message GetMutualFriendsPayload {
  User user = 1;
  optional Pagination pagination = 2;
}

message PaginatedResponse {
  int32 total = 1;
  int32 page = 2;
}

message PaginatedFriendsProfilesResponse {
  repeated FriendProfile friends = 1;
  PaginatedResponse pagination_data = 2;
}

message PaginatedFriendshipRequestsResponse {
  oneof response {
    FriendshipRequests requests = 1;
    InternalServerError internal_server_error = 2;
  }
  optional PaginatedResponse pagination_data = 3;
}

message UpsertFriendshipResponse {
  message Accepted {
    string id = 1;
    int64 created_at = 2;
    FriendProfile friend = 3;
    optional string message = 4;
  }
  oneof response {
    Accepted accepted = 1;
    InvalidFriendshipAction invalid_friendship_action = 2;
    InternalServerError internal_server_error = 3;
  }
}

message FriendshipUpdate {
  message RequestResponse {
    FriendProfile friend = 1;
    int64 created_at = 2;
    optional string message = 3;
    string id = 4;
  }
  message AcceptResponse { User user = 1; }
  message RejectResponse { User user = 1; }
  message DeleteResponse { User user = 1; }
  message CancelResponse { User user = 1; }
  message BlockResponse { User user = 1; }

  oneof update {
    RequestResponse request = 1;
    AcceptResponse accept = 2;
    RejectResponse reject = 3;
    DeleteResponse delete = 4;
    CancelResponse cancel = 5;
    BlockResponse block = 6;
  }
}

message FriendConnectivityUpdate {
  FriendProfile friend = 1;
  ConnectivityStatus status = 2;
}

message GetFriendshipStatusPayload {
  User user = 1;
}

enum FriendshipStatus {
  REQUEST_SENT = 0;
  REQUEST_RECEIVED = 1;
  CANCELED = 2;
  ACCEPTED = 3;
  REJECTED = 4;
  DELETED = 5;
  BLOCKED = 6;
  NONE = 7;
  BLOCKED_BY = 8;
}

message GetFriendshipStatusResponse {
  message Ok {
    FriendshipStatus status = 1;
    optional string message = 2;
  }
  oneof response {
    Ok accepted = 1;
    InternalServerError internal_server_error = 2;
  }
}

message BlockUserPayload {
  User user = 1;
}

message BlockUserResponse {
  message Ok {
    BlockedUserProfile profile = 1;
  }

  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
    ProfileNotFound profile_not_found = 4;
  }
}

message UnblockUserPayload {
  User user = 1;
}

message UnblockUserResponse {
  message Ok {
    BlockedUserProfile profile = 1;
  }

  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
    ProfileNotFound profile_not_found = 4;
  }
}

enum PrivateMessagePrivacySetting {
  ALL = 0;
  ONLY_FRIENDS = 1;
}

enum BlockedUsersMessagesVisibilitySetting {
  SHOW_MESSAGES = 0;
  DO_NOT_SHOW_MESSAGES = 1;
}

message SocialSettings {
  PrivateMessagePrivacySetting private_messages_privacy = 1;
  BlockedUsersMessagesVisibilitySetting blocked_users_messages_visibility = 2;
}

message GetSocialSettingsResponse {
  message Ok {
    SocialSettings settings = 1;
  }

  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
  }
}

message UpsertSocialSettingsPayload {
  optional PrivateMessagePrivacySetting private_messages_privacy = 1;
  optional BlockedUsersMessagesVisibilitySetting blocked_users_messages_visibility = 2;
}

message UpsertSocialSettingsResponse {
  oneof response {
    SocialSettings ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
  }
}

message GetPrivateMessagesSettingsPayload {
  repeated User user = 1;
}

message GetPrivateMessagesSettingsResponse {
  message PrivateMessagesSettings {
    User user = 1;
    PrivateMessagePrivacySetting private_messages_privacy = 2;
    bool is_friend = 3;
  }

  message Ok {
    repeated PrivateMessagesSettings settings = 1;
  }

  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
    ProfileNotFound profile_not_found = 4;
  }
}

message GetBlockedUsersPayload {
  optional Pagination pagination = 1;
}

message GetBlockedUsersResponse {
  repeated BlockedUserProfile profiles = 1;
  PaginatedResponse pagination_data = 2;
}

message GetBlockingStatusResponse {
  repeated string blocked_users = 1;
  repeated string blocked_by_users = 2;
}

message BlockUpdate {
  string address = 1;
  bool is_blocked = 2;
}

message CommunityMemberConnectivityUpdate {
  string community_id = 1;
  User member = 2;
  ConnectivityStatus status = 3;
}

// Private voice chats

// Starting a private voice chat

message StartPrivateVoiceChatPayload {
  User callee = 1;
}

message StartPrivateVoiceChatResponse {
  message Ok {
    string call_id = 1;
  }
  
  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
    ConflictingError conflicting_error = 4;
    ForbiddenError forbidden_error = 5;
  }
}

// Accepting a private voice chat

message AcceptPrivateVoiceChatPayload {
  string call_id = 1;
}

message AcceptPrivateVoiceChatResponse {
  message Ok {
    string call_id = 1;
    PrivateVoiceChatCredentials credentials = 2;
  }
  
  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
    NotFoundError not_found = 4;
    ForbiddenError forbidden_error = 5;
  }
}

// Rejecting a private voice chat

message RejectPrivateVoiceChatPayload {
  string call_id = 1;
}

message RejectPrivateVoiceChatResponse {
  message Ok {
    string call_id = 1;
  }
  
  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    InvalidRequest invalid_request = 3;
    NotFoundError not_found = 4;
  }
}

// Private voice chat updates

enum PrivateVoiceChatStatus {
  VOICE_CHAT_REQUESTED = 0;
  VOICE_CHAT_ACCEPTED = 1;
  VOICE_CHAT_REJECTED = 2;
  VOICE_CHAT_ENDED = 3;
  VOICE_CHAT_EXPIRED = 4;
}

message PrivateVoiceChatCredentials {
  string connection_url = 1;
}

message PrivateVoiceChatUpdate {
  string call_id = 1;
  PrivateVoiceChatStatus status = 2;
  optional User caller = 3;
  optional User callee = 4;
  optional PrivateVoiceChatCredentials credentials = 5;
}

// Ending a private voice chat
// This is sent from the client to the server whenever the user wants to end the voice chat
// This could occur before the voice chat is accepted or after it is accepted

message EndPrivateVoiceChatPayload {
  string call_id = 1;
}

message EndPrivateVoiceChatResponse {
  message Ok {
    string call_id = 1;
  }
  
  oneof response {
    Ok ok = 1;
    InternalServerError internal_server_error = 2;
    NotFoundError not_found = 3;
  }
}

// Get incoming private voice chat request

message GetIncomingPrivateVoiceChatRequestResponse {
  message Ok {
    User caller = 1;
    string call_id = 2;
  }

  oneof response {
    Ok ok = 1;
    NotFoundError not_found = 2;
    InternalServerError internal_server_error = 3;
  }
}

// Community Voice Chat messages
message StartCommunityVoiceChatPayload {
  string community_id = 1;
}

message StartCommunityVoiceChatResponse {
  message Ok {
    string voice_chat_id = 1;
    PrivateVoiceChatCredentials credentials = 2;
  }

  oneof response {
    Ok ok = 1;
    InvalidRequest invalid_request = 2;
    ForbiddenError forbidden_error = 3;
    ConflictingError conflicting_error = 4;
    InternalServerError internal_server_error = 5;
  }
}

message JoinCommunityVoiceChatPayload {
  string community_id = 1;
}

message JoinCommunityVoiceChatResponse {
  message Ok {
    string voice_chat_id = 1;
    PrivateVoiceChatCredentials credentials = 2;
  }

  oneof response {
    Ok ok = 1;
    InvalidRequest invalid_request = 2;
    ForbiddenError forbidden_error = 3;
    NotFoundError not_found_error = 4;
    ConflictingError conflicting_error = 5;
    InternalServerError internal_server_error = 6;
  }
}

message EndCommunityVoiceChatPayload {
  string voice_chat_id = 1;
}

message EndCommunityVoiceChatResponse {
  message Ok {
    // Empty response
  }

  oneof response {
    Ok ok = 1;
    InvalidRequest invalid_request = 2;
    ForbiddenError forbidden_error = 3;
    NotFoundError not_found_error = 4;
    InternalServerError internal_server_error = 5;
  }
}

service SocialService {  
  // Get the list of friends for the authenticated user
  rpc GetFriends(GetFriendsPayload) returns (PaginatedFriendsProfilesResponse) {}

  // Get the list of mutual friends between the authenticated user and the one in the parameter
  rpc GetMutualFriends(GetMutualFriendsPayload) returns (PaginatedFriendsProfilesResponse) {}

  // Get the pending friendship requests for the authenticated user
  rpc GetPendingFriendshipRequests(GetFriendshipRequestsPayload) returns (PaginatedFriendshipRequestsResponse) {}

  // Get the sent friendship requests for the authenticated user
  rpc GetSentFriendshipRequests(GetFriendshipRequestsPayload) returns (PaginatedFriendshipRequestsResponse) {}

  // Create or update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE
  rpc UpsertFriendship(UpsertFriendshipPayload)
      returns (UpsertFriendshipResponse) {}

  // Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE
  rpc SubscribeToFriendshipUpdates(google.protobuf.Empty)
      returns (stream FriendshipUpdate) {}

  // Get the friendship status between the authenticated user and the one in the parameter
  rpc GetFriendshipStatus(GetFriendshipStatusPayload) returns (GetFriendshipStatusResponse) {}

  // Subscribe to connectivity updates of friends: ONLINE, OFFLINE, AWAY
  rpc SubscribeToFriendConnectivityUpdates(google.protobuf.Empty)
      returns (stream FriendConnectivityUpdate) {}

  rpc BlockUser(BlockUserPayload) returns (BlockUserResponse) {}

  rpc UnblockUser(UnblockUserPayload) returns (UnblockUserResponse) {}

  rpc GetBlockedUsers(GetBlockedUsersPayload) returns (GetBlockedUsersResponse) {}

  rpc GetBlockingStatus(google.protobuf.Empty) returns (GetBlockingStatusResponse) {}

  rpc SubscribeToBlockUpdates(google.protobuf.Empty) returns (stream BlockUpdate) {}
  
  // Get all the social settings for the authenticated user
  rpc GetSocialSettings(google.protobuf.Empty) returns (GetSocialSettingsResponse) {}

  // Insert or update the social settings for the authenticated user
  rpc UpsertSocialSettings(UpsertSocialSettingsPayload) returns (UpsertSocialSettingsResponse) {}

  // Get the private messages privacy settings for the requested users
  rpc GetPrivateMessagesSettings(GetPrivateMessagesSettingsPayload) returns (GetPrivateMessagesSettingsResponse) {}

  // Subscribe to community member connectivity updates: ONLINE, OFFLINE
  rpc SubscribeToCommunityMemberConnectivityUpdates(google.protobuf.Empty)
      returns (stream CommunityMemberConnectivityUpdate) {}

  // Start a private voice chat
  rpc StartPrivateVoiceChat(StartPrivateVoiceChatPayload) returns (StartPrivateVoiceChatResponse) {}

  // Accept a private voice chat
  rpc AcceptPrivateVoiceChat(AcceptPrivateVoiceChatPayload) returns (AcceptPrivateVoiceChatResponse) {}

  // Reject a private voice chat
  rpc RejectPrivateVoiceChat(RejectPrivateVoiceChatPayload) returns (RejectPrivateVoiceChatResponse) {}

  // End a private voice chat
  rpc EndPrivateVoiceChat(EndPrivateVoiceChatPayload) returns (EndPrivateVoiceChatResponse) {}

  // Get the incoming private voice chat request
  rpc GetIncomingPrivateVoiceChatRequest(google.protobuf.Empty) returns (GetIncomingPrivateVoiceChatRequestResponse) {}

  // Subscribe to private voice chat updates
  rpc SubscribeToPrivateVoiceChatUpdates(google.protobuf.Empty) returns (stream PrivateVoiceChatUpdate) {}

  // Start a community voice chat
  rpc StartCommunityVoiceChat(StartCommunityVoiceChatPayload) returns (StartCommunityVoiceChatResponse) {}

  // Join a community voice chat
  rpc JoinCommunityVoiceChat(JoinCommunityVoiceChatPayload) returns (JoinCommunityVoiceChatResponse) {}

  // End a community voice chat
  rpc EndCommunityVoiceChat(EndCommunityVoiceChatPayload) returns (EndCommunityVoiceChatResponse) {}
}
