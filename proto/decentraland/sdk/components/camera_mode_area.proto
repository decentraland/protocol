syntax = "proto3";

package decentraland.sdk.components;

import "decentraland/common/vectors.proto";
import "decentraland/sdk/components/common/camera_type.proto";
import "decentraland/sdk/components/common/id.proto";

option (common.ecs_component_id) = 1071;

// The CameraModeArea component can be attached to an Entity to define a region of space where 
// the player's camera mode (1st-person, 3rd-person or cinematic) is overridden.
//
// The Entity's Transform position determines the center-point of the region, while its size is 
// given as a vector in the `area` property below. The Transform rotation is applied, but the scale 
// is ignored.
//
// When players leave the region, their previous setting is restored.
//
// Note that, while commonly used to delineate a 2D area in a scene (hence the name), the region
// is actually a 3D volume.
//
// When mode is set to CtCinematic, the cinematic_settings field must also be provided.
message PBCameraModeArea {
  decentraland.common.Vector3 area = 1;                       // the 3D size of the region
  common.CameraType mode = 2;                                 // the camera mode to enforce
  optional CinematicSettings cinematic_settings = 3;
  optional bool use_collider_range = 4;                       // if true, the player will be considered inside the area when they are within 0.3m of the area. default true
}

message CinematicSettings {
  uint32 camera_entity = 1;           // Entity that defines the cinematic camera transform.
                                      // Position -> camera's position
                                      // Rotation -> camera's direction
                                      // scale.z -> zoom level
                                      // scale.x and scale.y -> unused
  optional bool allow_manual_rotation = 2; // whether the user can move the camera's rotation. default false
  optional float yaw_range = 3;       // how far the camera can rotate around the y-axis / look left/right, in radians. default unrestricted
  optional float pitch_range = 4;     // how far the camera can rotate around the x-axis / look up-down, in radians. default unrestricted
                                      // note: cameras can never look up/down further than Vec3::Y
  optional float roll_range = 5;      // how far the camera can rotate around the z-axis / tilt, in radians. default unrestricted
  optional float zoom_min = 6;        // minimum zoom level. must be greater than 0. defaults to the input zoom level
  optional float zoom_max = 7;        // maximum zoom level. must be greater than 0. defaults to the input zoom level
}
