syntax = "proto3";
package decentraland.sdk.components;

import "decentraland/sdk/components/common/id.proto";
import "decentraland/common/vectors.proto";

option (common.ecs_component_id) = 1068;

// The RaycastResult component is added to an Entity when the results of a previously attached
// Raycast component are available. It contains information about the ray and any objects it 
// collided with.
message PBRaycastResult {
  int32 timestamp = 1;                       // the timestamp of the Raycast component addition
  decentraland.common.Vector3 origin = 2;    // the starting point of the ray
  decentraland.common.Vector3 direction = 3; // the direction vector of the ray
  repeated RaycastHit hits = 4;              // zero or more hits
}

// RaycastHit contains information about the intersection of a ray with a mesh.
message RaycastHit {
  // Position will be relative to the scene  
  decentraland.common.Vector3 position = 1;   // the intersection point
  decentraland.common.Vector3 origin = 2;     // the starting point of the ray
  decentraland.common.Vector3 direction = 3;  // the direction vector of the ray
  decentraland.common.Vector3 normal_hit = 4; // the entry vector of the ray into the collision mesh
  
  float length = 5;              // the distance between the ray origin and the hit position
  optional string mesh_name = 6; // (unused) mesh ID if collision happened inside a GltfContainer
  optional int64 entity_id = 7;  // the ID of the Entity that has the impacted mesh attached
}