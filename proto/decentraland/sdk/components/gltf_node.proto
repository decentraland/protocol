syntax = "proto3";
package decentraland.sdk.components;

import "decentraland/sdk/components/common/id.proto";
option (common.ecs_component_id) = 1045;

// a GltfNode links a scene entity with a node from within a gltf, allowing the scene to inspect it or modify it.
// This component must be added to a direct child of an entity with a PbGltfContainer component.
// The name must uniquely match the name of one of the nodes within the Gltf.
// 
// The renderer will attach a PbGltfNodeState to the entity describing the state. Once the state is `GNS_READY`, 
// the transform will be updated to match the position of the node within the gltf (relative to the gltf root),
// and a material component will be added (if the gltf node has a material).
// If an animation moves the node, the Transform will be updated.
//
// From the scene, you can modify various components to alter the gltf node:
// - modifying the `Transform` will move the node. The position is interpreted relative to the gltf root, regardless of any gltf node hierarchy.
//   If an animation is playing, the animation takes priority and the scene entity's position will be updated to match the animation.
// - `Visibility` can be added to hide or show the node and it's children in the gltf hierarchy.
// - `MeshRenderer` can be added to create or replace a mesh on the node.
// - `Material` can be added or modified to change the material properties. If the gltf node has a material, the original material will be
//   modified and any gltf features (e.g. occlusion maps) from the gtlf spec that the renderer supports but that are not exposed in the 
//   PbMaterial will be maintained.
//
// Note that you can add additional entities as children to the gltf node, but structural modifications of the gltf are not possible: 
// - changing the scene hierarchy will not change the gltf node hierarchy. Moving the entity out of the gltf will sever the link and
//   change the state to `GNS_FAILED`.
// - deleting the scene entity will not delete the gltf node.
message PBGltfNode {
  string name = 1; // the name of the target node in the Gltf.
}
