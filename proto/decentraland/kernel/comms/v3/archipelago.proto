syntax = "proto3";

import "decentraland/common/vectors.proto";

package decentraland.kernel.comms.v3;

// Server->Client messsages
message ChallengeResponseMessage {
  string challenge_to_sign = 1;
  bool already_connected = 2;
}

message WelcomeMessage {
  string peer_id = 1;
}

message IslandChangedMessage {
  string island_id = 1;
  string conn_str = 2;
  optional string from_island_id = 3;
  map<string, decentraland.common.Position> peers = 4;
}

message LeftIslandMessage {
  string island_id = 1;
  string peer_id = 2;
}

message JoinIslandMessage {
  string island_id = 1;
  string peer_id = 2;
}

enum KickedReason {
  KR_NEW_SESSION = 0;
}

message KickedMessage {
  KickedReason reason = 1;
}

message ServerPacket {
  oneof message {
    ChallengeResponseMessage challenge_response = 1;
    WelcomeMessage welcome = 2;
    IslandChangedMessage island_changed = 3;
    LeftIslandMessage  left_island = 4;
    JoinIslandMessage join_island = 5;
    KickedMessage kicked = 6;
  }
}

// Client->Server messsages
message ChallengeRequestMessage {
  string address = 1;
}

message SignedChallengeMessage {
  string auth_chain_json = 1;
}

message Heartbeat {
  decentraland.common.Position position = 1;
  optional string desired_room = 2;
}

message ClientPacket {
  oneof message {
    ChallengeRequestMessage challenge_request = 1;
    SignedChallengeMessage signed_challenge = 2;
    Heartbeat heartbeat = 3;
  }
}

// Others
message IslandData {
  string id = 1;
  repeated string peers = 2;
  uint32 max_peers = 3;
  decentraland.common.Position center = 4;
  double radius = 5;
}

message IslandStatusMessage {
  repeated IslandData data = 1;
}
