syntax = "proto3";

package decentraland.kernel.apis;

import "decentraland/sdk/ecs6/engine_interface_ecs6.proto";

message ManyEntityAction {
  repeated decentraland.sdk.ecs6.EntityAction actions = 1;
}

message SendBatchResponse {
  repeated EventData events = 1;
}

message UnsubscribeRequest {
  string event_id = 1;
}
message SubscribeRequest {
  string event_id = 1;
}
message SubscribeResponse {}
message UnsubscribeResponse {}

// Events
enum EventDataType {
  EDT_GENERIC = 0;
  EDT_POSITION_CHANGED = 1;
  EDT_ROTATION_CHANGED = 2;
}

message GenericPayload {
  string event_id = 3;
  string event_data = 4;
}

message ReadOnlyVector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message ReadOnlyQuaternion {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

message PositionChangedPayload {
  ReadOnlyVector3 position = 1;
  ReadOnlyVector3 camera_position = 2;
  float player_height = 3;
}

message RotationChangedPayload {
  ReadOnlyVector3 rotation = 1;
  ReadOnlyQuaternion quaternion = 2;
}

message EventData {
  EventDataType type = 1;
  optional GenericPayload generic = 2;
  optional PositionChangedPayload position_changed = 3;
  optional RotationChangedPayload rotation_changed = 4;
}

message CrdtSendToRendererRequest {
  bytes data = 1;
}

message CrdtSendToResponse {
  // list of CRDT messages coming back from the renderer
  repeated bytes data = 1;
}

message CrdtGetStateRequest {}
message CrdtGetStateResponse {
  // returns true if the returned state has scene-created entities
  bool has_entities = 1;
  // static entities data (root entity, camera, etc) and scene-created entities
  repeated bytes data = 2;
}

// deprecated
message CrdtMessageFromRendererRequest {}
// deprecated
message CrdtMessageFromRendererResponse {
  repeated bytes data = 1;
}

service EngineApiService {
  // support for legacy SDK events.

  // @deprecated
  rpc SendBatch(ManyEntityAction) returns (SendBatchResponse) {}
  // @deprecated
  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {}
  // @deprecated
  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse) {}

  // send information of the CRDT messages to the renderer. It returns the CRDT changes back from the renderer
  // like raycast responses or the player's position
  rpc CrdtSendToRenderer(CrdtSendToRendererRequest) returns (CrdtSendToResponse) {}

  // retrieves the current _full_ state of the entities from the renderer. This function is used to hidrate
  // the state of the scenes when the code of the worker is stopped/resumed
  rpc CrdtGetState(CrdtSendToRendererRequest) returns (CrdtGetStateResponse) {}

  // @deprecated, this response was merged into CrdtSendToResponse
  rpc CrdtGetMessageFromRenderer(CrdtMessageFromRendererRequest) returns (CrdtMessageFromRendererResponse) {}
}
