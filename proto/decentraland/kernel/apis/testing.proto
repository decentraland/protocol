syntax = "proto3";
package decentraland.kernel.apis;

import "decentraland/common/vectors.proto";

service TestingService {
  // sends a test result to the test runner
  rpc LogTestResult(TestResult) returns (TestResultResponse) {}
  // send a list of all planned tests to the test runner
  rpc Plan(TestPlan) returns (TestPlanResponse) {}
  // sets the camera position and rotation in the engine
  rpc SetCameraTransform (SetCameraTransformTestCommand) returns (SetCameraTransformTestCommandResponse) {}
  // @internal
  // take a screenshot and compare it with a stored one
  //  it hides the explorer hud and ui, primary player and players of avatar scenes
  rpc TakeAndCompareScreenshot (TakeAndCompareScreenshotRequest) returns (TakeAndCompareScreenshotResponse) {}
}

message TakeAndCompareScreenshotRequest {
  // the source path in the scene where the screenshot is stored, 
  //  the snapshot taken is compared with the stored one
  string src_stored_snapshot = 1;
  // the camera position where is set before and while taking the screenshot, relative to base scene
  decentraland.common.Vector3 camera_position = 2;
  // the camera position where is target to before and while taking the screenshot, relative to base scene
  decentraland.common.Vector3 camera_target = 3;
  // width x height screenshot size
  decentraland.common.Vector2 screenshot_size = 4;
  // comparison method choice and parameters values
  oneof comparison_method {
    ComparisonMethodGreyPixelDiff grey_pixel_diff = 5;
  }

  message ComparisonMethodGreyPixelDiff {}
  
  enum SnapshotMode {
    // only visible 3d scene and ui scene
    SM_3D_AND_UI = 0;
    // only visible 3d scene
    SM_3D_ONLY = 1;
    // only visible ui scene
    SM_UI_ONLY = 2;
  };
  SnapshotMode snapshot_mode = 6;
}


message TakeAndCompareScreenshotResponse {
  bool stored_snapshot_found = 1;
  oneof comparison_method_result {
    ComparisonMethodGreyPixelDiffResult grey_pixel_diff = 2;
  }

  message ComparisonMethodGreyPixelDiffResult {
    float similarity = 1;
  }
}

message TestResult {
    string name = 1;
    bool ok = 2;
    optional string error = 3;
    optional string stack = 4;

    // how many ADR-148 ticks were spent running this test
    uint32 total_frames = 5;

    // total time in seconds spent running this test
    float total_time = 6;
}
message TestResultResponse {}

message TestPlan {
  message TestPlanEntry {
    string name = 1;
  }

  repeated TestPlanEntry tests = 1;
}
message TestPlanResponse {}

message SetCameraTransformTestCommand {
  Vector3 position = 1;
  Quaternion rotation = 2;

  message Vector3 {
    float x = 1;
    float y = 2;
    float z = 3;
  }

  message Quaternion {
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
  }
}
message SetCameraTransformTestCommandResponse {}

