// ***
// FOR INTERNAL USE ONLY, IN BETA VERSION OF THE PROTOCOL.
// SUBJECT TO CHANGE.
// ***

syntax = "proto3";
package decentraland.social.friendships;

enum ServiceErrors {
  // proto3 requires that first value in enum have numeric value of 0
  UNKNOWN = 0;
  BAD_REQUEST = 400;
  UNAUTHORIZED = 401;
  FORBIDDEN = 403;
  NOT_FOUND = 404;
  TOO_MANY_REQUESTS = 429;
  INTERNAL_SERVER_ERROR = 500;
}

// This message is a response that is sent from the server to the client
message FriendshipEventResponse {
  oneof body {
    RequestResponse request = 1;
    AcceptResponse accept = 2;
    RejectResponse reject = 4;
    DeleteResponse delete = 5;
    CancelResponse cancel = 6;
  }
}

message FriendshipEventPayload {
  oneof body {
    RequestPayload request = 1;
    AcceptPayload accept = 2;
    RejectPayload reject = 4;
    DeletePayload delete = 5;
    CancelPayload cancel = 6;
  }
}

message User { string address = 1; }

message Users { repeated User users = 1; }

message RequestResponse {
  User user = 1;
  int64 created_at = 2;
  optional string message = 3;
}

message RequestPayload {
  User user = 1;
  optional string message = 3;
}

message Requests {
  int64 total = 1; // Total amount of friendship requests
  repeated RequestResponse items = 2;
}

message RequestEvents {
  Requests outgoing = 1; // Requests the authed user have sent to users
  Requests incoming = 2; // Requests the authed user have received from users
}

message AcceptResponse { User user = 1; }

message AcceptPayload { User user = 1; }

message RejectResponse { User user = 1; }

message RejectPayload { User user = 1; }

message DeleteResponse { User user = 1; }

message DeletePayload { User user = 1; }

message CancelResponse { User user = 1; }

message CancelPayload { User user = 1; }

message UpdateFriendshipPayload {
  FriendshipEventPayload event = 1;
  // For internal use only, subject to change.
  optional Payload auth_token = 2;
}

message UpdateFriendshipResponse { FriendshipEventResponse event = 1; }

message SubscribeFriendshipEventsUpdatesResponse {
  repeated FriendshipEventResponse events = 1;
}

message Payload {
  // For internal use only, subject to change.
  optional string synapse_token = 1;
}

service FriendshipsService {
  // Get the list of friends for the authenticated user
  rpc GetFriends(Payload) returns (stream Users) {}

  // Get the list of request events for the authenticated user
  rpc GetRequestEvents(Payload) returns (RequestEvents) {}

  // Update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE
  rpc UpdateFriendshipEvent(UpdateFriendshipPayload)
      returns (UpdateFriendshipResponse) {}

  // Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL,
  // DELETE
  rpc SubscribeFriendshipEventsUpdates(Payload)
      returns (stream SubscribeFriendshipEventsUpdatesResponse) {}
}
