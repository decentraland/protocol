syntax = "proto3";
package decentraland.social.friendships;

import "google/protobuf/empty.proto";

// Validation and anti-spam errors
enum FriendshipErrorCode {
  TOO_MANY_REQUESTS_SENT = 0;
  NOT_ENOUGH_TIME_PASSED = 1;
  BLOCKED_USER = 2;
  NON_EXISTING_USER = 3;
  INVALID_REQUEST = 4;
  UNKNOWN = 5;
}

enum EventType {
  REQUEST = 0;
  ACCEPT = 1;
  REJECT = 2;
  CANCEL = 3;
  DELETE = 4;
}

// This message is a response that is sent from the server to the client
message FriendshipEvent {
  oneof body {
    Request request = 1;
    Accept accept = 2;
    Reject reject = 4;
    Delete delete = 5;
    Cancel cancel = 6;
  }
}

message User { string address = 1; }

message Users { repeated User users = 1; }

message Request {
  User user = 1;
  int64 created_at = 2;
  optional string message = 3;
}

message Requests {
  int64 total = 1; // Total amount of friendship requests
  repeated Request items = 2;
}

message RequestEvents {
  Requests outgoing = 1; // Requests the authed user have sent to users
  Requests incoming = 2; // Requests the authed user have received from users
}

message Accept { User user = 1; }

message Reject { User user = 1; }

message Delete { User user = 1; }

message Cancel { User user = 1; }

// We expect new payloads in the future here, since each event type shall have
// its own
message UpdateFriendshipPayload {
  User user = 1;
  EventType event = 2;

  oneof payload { Request request = 3; }
}

message UpdateFriendshipResponse {
  oneof response {
    FriendshipErrorCode error = 1;
    FriendshipEvent event = 2;
  }
}

message SubscribeFriendshipEventsUpdatesResponse {
  repeated FriendshipEvent events = 1;
}

service FriendshipsService {
  // Get the list of friends for the authenticated user
  rpc GetFriends(google.protobuf.Empty) returns (stream Users) {}

  // Get the list of request events for the authenticated user
  rpc GetRequestEvents(google.protobuf.Empty) returns (RequestEvents) {}

  // Update friendship status: REQUEST, ACCEPT, REJECT, CANCEL, DELETE
  rpc UpdateFriendshipEvent(UpdateFriendshipPayload)
      returns (UpdateFriendshipResponse) {}

  // Subscribe to updates of friendship status: REQUEST, ACCEPT, REJECT, CANCEL,
  // DELETE
  rpc SubscribeFriendshipEventsUpdates(google.protobuf.Empty)
      returns (stream SubscribeFriendshipEventsUpdatesResponse) {}
}
